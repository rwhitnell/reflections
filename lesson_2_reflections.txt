**What happens when you initialize a repository? Why do you need to do it?**

A .git folder is created with the structure to store the commits.
Doing it sets everything up for starting to commit files to the repository.

**How is the staging area different from the working directory and the repository? What value do you think it offers?**

The staging area is an intermediate stage between the working directory and the repository
It allows related files to be grouped together and then entered into the repository in a single commit.
Other files can be excluded if they aren't related to the files being staged.

**How can you use the staging area to make sure you have one commit per logical change?**

Place all the files that you think you want to commit into the staging area.
Use git status to determine that the files you're ready to commit make sense.
Review the changes with git diff to make sure that there is at least one logical change, but no more than one logical change.

**What are some situations when branches would be helpful in keeping your history organized? How would branches help?**

Testing a new experimental feature could require a new branch.
Doing a major refactoring without committing to changing the master
Making significant changes to the user interface or look and feel

**How do the diagrams help you visualize the branch structure?**

The diagrams show where the branches have been made in the existing branch structure.
Each branch must start from a particular commit, and those commits may not always have been at the end of an existing branch.
They also show what is reachable from the tip of a particular branch (and what is unreachable).

**What is the result of merging two branches together? Why do we represent it in the diagram the way we do?**

The merging of two branches results in a single branch that points to the commits of both branches.
We show it in the diagram with arrows pointing along both branches to show that all the commits from both branches are present.


**What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?**

Git's automatic merging gets most of the simple stuff right. That saves a lot of time for the programmers.
It keeps a good record of what merges have been done and the full set of commits that have led to the merged branch.

Manual merging would guarantee that every single merge is the desired one.
But many merges are clear, particularly if each commit is one logical change, so Git can handle that better.
